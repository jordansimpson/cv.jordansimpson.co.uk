// /* 
// ------------
// TOOLS.
// MIXINS
// ------------ 
// */

// As I don't include Compass in my framework I like to keep 
// a few mixins around to help with my workflow. 
// This is just personal preference.

// Font size mixin
// (Utilises claculateRem function)
// Usage example: 
// .class{
//      @include font-size(16px);
// }

// @mixin font-size($size) {
//   font-size: $size;
//   font-size: calculateRem($size);
// }

@mixin remCalc($propname, $size) {
  #{$propname}: $size;
  #{$propname}: calculateRem($size);
}


// CSS Transition mixin
// Usage example:
// .class{
//      @include tranisiton(all ease-in .25s);
// }

@mixin transition($transition) {
    -moz-transition:    $transition;
    -o-transition:      $transition;
    -webkit-transition: $transition;
    transition:         $transition;
}

// CSS Transform mixins
// Usage example:
// .class{
//     @include transform(scale(0.5));
// }

@mixin transform($transforms) {
    -moz-transform:    $transforms;
    -o-transform:      $transforms;
    -ms-transform:     $transforms;
    -webkit-transform: $transforms;
    transform:         $transforms;
}

@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

@mixin scale($scale) {
     @include transform(scale($scale));
}

@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}

@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}

// transform origin

@mixin transform-origin ($origin) {
    moz-transform-origin:     $origin;
    -o-transform-origin:      $origin;
    -ms-transform-origin:     $origin;
    -webkit-transform-origin: $origin;
    transform-origin:         $origin;
}

// Opacity mixin
//
// Usage example:
// .class{
//      @include opacity(0.5);      
// }

@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// /**
// * Media Query mixins
// *
// * Usage example:
// * .class{
// *   width: 25%;
// *   @include respond-to(tablet){
// *       width: 50%; 
// *   }
// *   @include respond-to(mobile){
// *       width: 100%;    
// *   }
// * }
// *  
// */

// ------------
// MIXINS.
// MEDIA QUERIES
// ------------
// [!]DEPENDENCIES:
// settings.breakpoints.scss
// ------------

@mixin respond-to($media) {
    @if $media == tiny {
        @media only screen 
        and (max-width: $break-tiny)
        { @content; }
    }
    @if $media == small-screen {
        @media only screen  
        and (max-width: $break-small - 1)
        { @content; }
    }
    @if $media == medium-screen {
        @media only screen 
        and (max-width: $break-medium - 1)
        { @content; }
    }
    @if $media == large-screen {
        @media only screen 
        and (min-width: $break-large)
        { @content; }
    }
    @if $media == $media {
        @media only screen 
        and (max-width: $media)
        { @content; }
    }
    @if $media == retina {
        @media 
        only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (min--moz-device-pixel-ratio: 2),
        only screen and (-moz-device-pixel-ratio: 2),
        only screen and (-o-min-device-pixel-ratio: 2/1),
        only screen and (min-device-pixel-ratio: 2),
        only screen and (min-resolution: 192dpi),
        only screen and (min-resolution: 2dppx) 
        { @content; }
    }
}

///**
// *
// * PLACEHOLDERS
// *
// * If you are new to Sass then you may not know what placeholders are so
// * below is a basis overview. 
// *
// * A placeholder is something that can be utilised with the @extend directive
// * and extends pre-existing styling within a new class. This can be done
// * using a class (@extend .class) but this can have sometimes not give the 
// * affect you wanted in the output.
// *
// * If you wish to find out more I recommend visiting the sass way website -
// * http://thesassway.com/intermediate/understanding-placeholder-selectors
// *
// */

// %btn placholder

%btn{
    @include remCalc(padding, 16px);
    @include remCalc(margin-right, 16px);
    @include remCalc(margin-bottom, 16px);
    @include transition(.25s);
    background: $main-orange;
    color: #ffffff;
    text-align: center;
    vertical-align: middle;
    line-height: 1;
    letter-spacing: .05rem;
    text-decoration: none;
    display: inline-block;
}


// %smooth placholder
//
// This placeholder provides a smoother corner effect.

%smooth{
    border-radius: 4px;
}